#appending multiple values
a<-append(a,c(1:10))
#print vector
print(a)
a<-c()
print(a)
a<-append(a,10)
print(a)
a<-append(a,c(1:10))
print(a)
source("E:/OSS/Exerice 1.R")
print(a)
a<-c(10,20,30,40)
print(a)
i=3
print(a[i])
a<-c(10,20,30,30,20,40)
b<-unique(a)
print(b)
a<-c(10,10,20,20,30,40)
print(a)
no_duplicate<-a(!duplicated(a))
no_duplicate<-a[!duplicated(a)]
print(no_duplicate)
vector<-c(10,20,30,40)
print(a)
vector<-c(10,20,30,40)
print(a)
target<-30
index<-which(vector==target)
print(index)
vector<-c(10,20,30)
print(vector)
sumV<-sum(vector)
meanV<-mean(vector)
prodV<-prod(vector)
print(paste("Sum : ",sumV))
print(paste("Mean : ",MeanV))
print(paste("Mean : ",meanV))
print(paste("Product: ",productV))
print(paste("Sum : ",sumV))
print(paste("Mean : ",meanV))
print(paste("Product: ",prodV))
vector<-c(10,20,40)
print(vector)
#product of vector using prod()
product<-prod(vector)
#print product
print(paste(product))
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define range
lowelimit<-1
upperlimit<-6
#count the no of values between the range
count<-sum(vector>=lowerlimit & vector<=upperlimit)
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define range
lowerlimit<-1
upperlimit<-6
#count the no of values between the range
count<-sum(vector>=lowerlimit & vector<=upperlimit)
print(paste("The count of elements between the range is: ",count))
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define range
lowerlimit<-1
upperlimit<-400
#count the no of values between the range
count<-sum(vector>=lowerlimit & vector<=upperlimit)
print(paste("The count of elements between the range is: ",count))
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define range
lowerlimit<-2
upperlimit<-400
#count the no of values between the range
count<-sum(vector>=lowerlimit & vector<=upperlimit)
print(paste("The count of elements between the range is: ",count))
#create vector
vector<-c(1,1,2,3,4,5,5,5,5,6)
#print vector
print(vector)
#using table function to count frequency of values
frequency_table<-table(vector)
#getting frequency of specified value (e.g) 5
frequency_specified<-frequency_table[5]
#print frequency
print(frequency_specified)
#create vector
vector<-c(10,30,40,200,500,400)
print(vector)
#accessing last element using indexing
last_value<-vector[length(vector)]
#print the result
print(last_value)
#create two vector
vector1<-c(1,2,3,4,5)
vector2<-c(1,2,6,7,8)
#print vector
print(vector1)
print(vector2)
#find elements in vector1 not present in vector2
result<-vector1[!vector1 %in% vector2]
#print the result
print(result)
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#find the Nth highest value by sorting
highest_value<-sort(vector,decreasing = TRUE(N))
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#find the Nth highest value by sorting
highest_value<-sort(vector,decreasing = TRUE)[N]
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#find the Nth highest value by sorting
highest_value<-sort(vector,decreasing = TRUE)[n]
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define the N value
N<-2
#find the Nth highest value by sorting
highest_value<-sort(vector,decreasing = TRUE)[n]
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define the N value
N<-2
#find the Nth highest value by sorting
highest_value<-sort(vector,decreasing = TRUE)[N]
#print the result
print(highest_value)
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define the N value
N<-2
#find the Nth highest value by sorting
smallest_value<-sort(vector)[N]
#print the result
print(smallest_value)
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define the N value
N<-2
#extract the Nth value
result<-seq[N,length(vector),N]
#create vector
vector<-c(10,20,40,50,300,400,200)
print(vector)
#define the N value
N<-2
#extract the Nth value
result<-vector[seq(N,length(vector),N)]
#print the result
print(result)
emp_id<-c('A001','A002','A003')
emp_salary<-c(50000,60000,70000)
emp_dept<-c('HR','Freelance','IT','DigitalMarketing')
emp_data<-data.frame(emp_id,emp_salary,emp_dept)
#create sample data in vector
emp_id<-c('A001','A002','A003')
emp_salary<-c(5000.0,6000.0,7000.0)
emp_dept<-c('HR','Freelance','IT','DigitalMarketing')
#create data frame
emp_data<-data.frame(emp_id,emp_salary,emp_dept)
#create sample data in vector
emp_id<-c('A001','A002','A003')
emp_salary<-c(5000.0,6000.0,7000.0)
emp_dept<-c('HR','Freelance','IT')
#create data frame
emp_data<-data.frame(emp_id,emp_salary,emp_dept)
#print data frame
print(emp_data)
#create sample data in vector
emp_id<-c('A001','A002','A003')
emp_sal<-c(5000.0,6000.0,7000.0)
emp_dept<-c('HR','FL','IT')
#create data frame
emp_data<-data.frame(emp_id,emp_sal,emp_dept)
#print data frame
print(emp_data)
apple_quality <- read.csv("apple_quality.csv")
apple_quality <- read.csv("C:/Users/jessi/Downloads/archive (6)/apple_quality.csv")
goodfruits=subset(apple_quality,Quality=="good")
max_value<-max(goodfruits$Sweetness)
min_value<-min(goodfruits$Sweetness)
cat("The maximum value of sweetness of all the good apple fruits: ",max_value ,"\n")
cat("The minimum value of sweetness of all the good apple fruits: ",min_value ,"\n")
juiceness<-subset(apple_quality,Juiciness)
juiceness=subset(apple_quality,Juiciness)
juiceness=subset(apple_quality,Juiciness>0)
cat("The positve values of juicenss is: ",juiceness)
print("The positive values of Juicecness is: ")
print(juiceness)
print("The positive values of Ripeness is: ")
print(ripeness)
ripeness=apple_quality$Ripeness(apple_quality$Ripeness>0)
juiceness=apple_quality$Juiciness[apple_quality$Juiciness>0]
ripeness=apple_quality$Ripeness[apple_quality$Ripeness>0]
print("The positive values of Juicecness is: ")
print(juiceness)
print("The positive values of Ripeness is: ")
print(ripeness)
false_statement<-apple_quality[apple_quality$Juiciness>0 & apple_quality$Ripeness>0 & apple_quality$Sweetness<=0]
false_statement<-apple_quality[apple_quality$Juiciness>0 & apple_quality$Ripeness>0 & apple_quality$Sweetness<=0, ]
print("The data that makes the given statement false is: ")
print(false_statement)
unpleasantly_sweet_data <- subset(apple_quality, Juiciness > 0 & Ripeness > 0 & Sweetness <= 0, select = c(Juiciness, Ripeness, Sweetness))
# Display the results
print("Columns where positive Juiciness and Ripeness do not result in positive Sweetness:")
print(unpleasantly_sweet_data)
statement_false <- subset(apple_quality, Juiciness > 0 & Ripeness > 0 & Sweetness <= 0, select = c(Juiciness, Ripeness, Sweetness))
print("Columns where positive Juiciness and Ripeness do not result in positive Sweetness:")
print(statement_false)
apple_quality <- read.csv("C:/Users/jessi/Downloads/archive (6)/apple_quality.csv")
goodfruits=subset(apple_quality,Quality=="good")
max_value<-max(goodfruits$Sweetness)
min_value<-min(goodfruits$Sweetness)
cat("The maximum value of sweetness of all the good apple fruits: ",max_value ,"\n")
cat("The minimum value of sweetness of all the good apple fruits: ",min_value ,"\n")
juiceness=apple_quality$Juiciness[apple_quality$Juiciness>0]
ripeness=apple_quality$Ripeness[apple_quality$Ripeness>0]
print("The positive values of Juicecness is: ")
print(juiceness)
print("The positive values of Ripeness is: ")
print(ripeness)
shiny::runApp('OSS_Packages')
runApp('OSS_Packages')
